(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var TemplateFactory, TemplateLoader, TemplatesExtension,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TemplateFactory = require('./TemplateFactory');

TemplateLoader = require('./TemplateLoader');

TemplatesExtension = (function(_super) {
  __extends(TemplatesExtension, _super);

  function TemplatesExtension() {
    return TemplatesExtension.__super__.constructor.apply(this, arguments);
  }

  TemplatesExtension.prototype.init = function() {
    this.setConfig({
      baseUrl: '<%baseUrl%>',
      dir: '/dist/templates'
    });
  };

  TemplatesExtension.prototype.build = function(injector) {
    injector.define('templateFactory', TemplateFactory);
    injector.define('templateLoader', TemplateLoader, (function(_this) {
      return function(service) {
        service.baseUrl = _this.config.baseUrl;
        service.templatesDir = _this.config.dir;
      };
    })(this));
  };

  return TemplatesExtension;

})(Miwo.di.InjectorExtension);

module.exports = TemplatesExtension;


},{"./TemplateFactory":3,"./TemplateLoader":4}],2:[function(require,module,exports){
var Template;

Template = (function() {
  Template.prototype.loader = null;

  Template.prototype.renderer = null;

  Template.prototype.params = null;

  Template.prototype.target = null;

  function Template(renderer) {
    this.renderer = renderer;
    this.params = {};
  }

  Template.prototype.setTarget = function(target) {
    this.target = target;
  };

  Template.prototype.set = function(key, value) {
    var k, v;
    if (Type.isObject(key)) {
      for (k in key) {
        v = key[k];
        this.params[k] = v;
      }
    } else {
      this.params[key] = value;
    }
    return this;
  };

  Template.prototype.get = function(key) {
    return this.params[key];
  };

  Template.prototype.setLoader = function(loader) {
    this.loader = loader;
  };

  Template.prototype.setFilter = function(name, filter) {
    this.renderer.setFilter(name, filter);
    return this;
  };

  Template.prototype.setFilters = function(filters) {
    var filter, name;
    for (name in filters) {
      filter = filters[name];
      this.renderer.setFilter(name, filter);
    }
    return this;
  };

  Template.prototype.setSource = function(config) {
    this.renderer.setSource(this.loader.load(config));
    return this;
  };

  Template.prototype.render = function(params) {
    var data, name, value, _ref;
    data = {};
    _ref = this.params;
    for (name in _ref) {
      value = _ref[name];
      data[name] = value;
    }
    for (name in params) {
      value = params[name];
      data[name] = value;
    }
    this.target.set('html', this.renderer.render(data));
  };

  return Template;

})();

module.exports = Template;


},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Template, TemplateFactory,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Template = require('./Template');

TemplateFactory = (function(_super) {
  __extends(TemplateFactory, _super);

  function TemplateFactory() {
    return TemplateFactory.__super__.constructor.apply(this, arguments);
  }

  TemplateFactory.prototype.templateRendererFactory = TemplateFactory.inject('templateRendererFactory');

  TemplateFactory.prototype.templateLoader = TemplateFactory.inject('templateLoader');

  TemplateFactory.prototype.createTemplate = function() {
    var template;
    template = new Template(this.templateRendererFactory.create());
    template.setLoader(this.templateLoader);
    return template;
  };

  return TemplateFactory;

})(Miwo.Object);

module.exports = TemplateFactory;

},{"./Template":2}],4:[function(require,module,exports){
var TemplateLoader;

TemplateLoader = (function() {
  function TemplateLoader() {}

  TemplateLoader.prototype.baseUrl = null;

  TemplateLoader.prototype.templatesDir = null;

  TemplateLoader.prototype.templatesExt = 'latte';

  TemplateLoader.prototype.load = function(source) {
    if (source.indexOf('#') === 0) {
      return $(source.replace(/^\#/, '')).get('html');
    } else if (source.indexOf('path:') === 0) {
      return this.loadFromPath(source.replace(/^path:/, ''));
    } else if (source.indexOf('//') === 0) {
      return this.loadFromPath(source.replace(/^\/\//, ''));
    } else {
      return source;
    }
  };

  TemplateLoader.prototype.loadFromPath = function(path) {
    var url;
    url = this.baseUrl + this.templatesDir + '/' + path + '.' + this.templatesExt + '?t=' + (new Date().getTime());
    return miwo.http.read(url);
  };

  return TemplateLoader;

})();

module.exports = TemplateLoader;


},{}],5:[function(require,module,exports){
Miwo.templates = {
  Template: require('./Template')
};

Miwo.Template = Miwo.templates.Template;

miwo.registerExtension('miwo-templates', require('./DiExtension'));


},{"./DiExtension":1,"./Template":2}]},{},[5])